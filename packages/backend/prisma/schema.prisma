// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile            StudentProfile?
  createdLessons     Lesson[]
  createdQuizzes     Quiz[]
  quizAttempts       QuizAttempt[]
  xpTransactions     XPTransaction[]
  achievements       UserAchievement[]
  badges             UserBadge[]
  streaks            Streak[]
  classEnrollments   ClassEnrollment[]
  teachingClasses    Class[]          @relation("ClassTeacher")
  progressRecords    Progress[]
  chatSessions       ChatSession[]

  @@map("users")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

// Student Profile & Gamification
model StudentProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  displayName   String
  level         Int      @default(1)
  totalXP       Int      @default(0)
  currentLevelXP Int     @default(0)
  nextLevelXP   Int      @default(100)
  streak        Int      @default(0)
  longestStreak Int      @default(0)
  avatar        Json     // Avatar configuration
  preferences   Json     // Profile preferences
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

// Lessons
model Lesson {
  id          String      @id @default(cuid())
  title       String
  description String
  subject     Subject
  gradeLevel  GradeLevel
  duration    Int         // in minutes
  difficulty  Difficulty
  content     Json        // Lesson content structure
  activities  Json        // Activities and exercises
  resources   Json        // Additional resources
  tags        String[]
  isPublic    Boolean     @default(false)
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  creator   User       @relation(fields: [createdBy], references: [id])
  quizzes   Quiz[]
  progress  Progress[]

  @@map("lessons")
}

// Quizzes
model Quiz {
  id          String      @id @default(cuid())
  title       String
  description String
  lessonId    String?
  subject     Subject
  gradeLevel  GradeLevel
  difficulty  Difficulty
  questions   Json        // Quiz questions
  settings    Json        // Quiz settings
  tags        String[]
  isPublished Boolean     @default(false)
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  creator  User          @relation(fields: [createdBy], references: [id])
  lesson   Lesson?       @relation(fields: [lessonId], references: [id])
  attempts QuizAttempt[]

  @@map("quizzes")
}

model QuizAttempt {
  id           String        @id @default(cuid())
  quizId       String
  studentId    String
  attemptNumber Int
  answers      Json          // Student answers
  score        Int
  maxScore     Int
  percentage   Int
  passed       Boolean
  timeSpent    Int           // in seconds
  status       AttemptStatus
  startedAt    DateTime      @default(now())
  submittedAt  DateTime?
  createdAt    DateTime      @default(now())

  quiz    Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([quizId, studentId, attemptNumber])
  @@map("quiz_attempts")
}

// Progress Tracking
model Progress {
  id               String           @id @default(cuid())
  studentId        String
  lessonId         String
  status           ProgressStatus
  completionRate   Int              @default(0) // 0-100
  timeSpent        Int              @default(0) // in minutes
  score            Int?
  startedAt        DateTime         @default(now())
  completedAt      DateTime?
  lastAccessedAt   DateTime         @default(now())
  moduleProgress   Json             // Progress on individual modules

  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  lesson  Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([studentId, lessonId])
  @@map("progress")
}

// Gamification
model XPTransaction {
  id          String   @id @default(cuid())
  studentId   String
  amount      Int
  source      XPSource
  sourceId    String
  description String
  multiplier  Float    @default(1.0)
  bonusReason String?
  timestamp   DateTime @default(now())

  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("xp_transactions")
}

model Achievement {
  id          String              @id @default(cuid())
  name        String              @unique
  description String
  icon        String
  category    AchievementCategory
  type        AchievementType
  criteria    Json                // Achievement criteria
  reward      Json                // XP and other rewards
  isSecret    Boolean             @default(false)
  createdAt   DateTime            @default(now())

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  progress      Json     // Current progress
  earnedAt      DateTime?
  createdAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Badge {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  icon        String
  color       BadgeColor
  category    BadgeCategory
  rarity      BadgeRarity
  criteria    Json          // Badge criteria
  createdAt   DateTime      @default(now())

  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model Streak {
  id           String     @id @default(cuid())
  studentId    String
  type         StreakType
  current      Int        @default(0)
  longest      Int        @default(0)
  lastActivity DateTime?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, type])
  @@map("streaks")
}

// Class Management
model Class {
  id          String   @id @default(cuid())
  name        String
  description String?
  subject     Subject
  gradeLevel  GradeLevel
  teacherId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher     User              @relation("ClassTeacher", fields: [teacherId], references: [id])
  enrollments ClassEnrollment[]

  @@map("classes")
}

model ClassEnrollment {
  id         String   @id @default(cuid())
  classId    String
  studentId  String
  enrolledAt DateTime @default(now())
  isActive   Boolean  @default(true)

  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
  @@map("class_enrollments")
}

// AI Chat Sessions
model ChatSession {
  id        String        @id @default(cuid())
  userId    String
  subject   Subject?
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id            String      @id @default(cuid())
  sessionId     String
  role          MessageRole
  content       String
  timestamp     DateTime    @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Enums
enum Subject {
  MATHEMATICS
  SCIENCE
  ENGLISH
  HISTORY
  GEOGRAPHY
  ART
  MUSIC
  PHYSICAL_EDUCATION
  COMPUTER_SCIENCE
  FOREIGN_LANGUAGE
}

enum GradeLevel {
  KINDERGARTEN
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
  GRADE_11
  GRADE_12
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PAUSED
}

enum AttemptStatus {
  IN_PROGRESS
  SUBMITTED
  GRADED
  ABANDONED
  EXPIRED
}

enum XPSource {
  LESSON_COMPLETED
  QUIZ_COMPLETED
  PERFECT_SCORE
  STREAK_BONUS
  ACHIEVEMENT_EARNED
  DAILY_LOGIN
  FIRST_TRY
  SPEED_BONUS
}

enum AchievementCategory {
  LEARNING
  MASTERY
  CONSISTENCY
  EXPLORATION
  SOCIAL
  SPECIAL
}

enum AchievementType {
  PROGRESS
  MILESTONE
  STREAK
  PERFECT
  SPEED
  COLLECTION
}

enum BadgeColor {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum BadgeCategory {
  ACADEMIC
  SOCIAL
  STREAK
  SPECIAL
  SEASONAL
}

enum BadgeRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum StreakType {
  DAILY_LOGIN
  DAILY_LESSON
  DAILY_QUIZ
  PERFECT_SCORES
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
